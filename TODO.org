#+TODO: TODO | DONE PUTOFF
* To Document:
Make a note of all the keybindings I've set up.
Write down all the customisation I might have to change depending on machine
    (e.g. python shell type)
* Keybindings
** Including external plugins
** Excluding external plugins
* To Fix:
find-file including line numbers in suffix (e.g. ~file-name:20: some-grep-match~)

slime -- keybinding swapping -- sometimes gets back the paredit bindings after
         switching buffers
Figure out why python-mode's inbuilt flymake settings aren't working.
Slime -- when stepping through functions, buffers move around.
gdb   -- thinks it's being clever when selecting windows, but it's being very annoying
* Things to Do
** TODO Much config requires already loaded package
Look out for this when using emacs.
For example, my smart-window config was overridden because the smart-window
package was loaded *after* the config was done.

Isearch-snappy
** DONE Integration testing for entire .emacs.d
I should make tests for my emacs configuration.
This could be for regression tests (e.g. I notice another little bug in my
open-line function and store it somewhere so that I never make that mistake
again).
It would also alert me if anything in emacs proper breaks something that I've
had set up.

Pretty much the only maintainability problem it doesn't fix for me will be if
something gets put into emacs proper that removes the need for some of the elisp
I've written.

There is a project management system named [[https://github.com/cask/cask][cask]], and an integration testing
library named [[https://github.com/ecukes/ecukes][ecukes]].

I think these should be pretty much all I need.

Don't put too much effort into it -- I can just add single tests each time I do
something new.
** TODO Add a property to bind a buffer to a window
I find emacs' choices about which windows should show which buffers very
annoying.
This is especially a problem with things like Slime and gdb.

I'm thinking about adding a property to some windows saying "if you're looking
for a window to display something, but you haven't explicitly chosen this one,
then look somewhere else".

If I include a check for this property in my manual window choice functions,
then I may be able to force gdb to do what I want.

The idea being that when gdb is looking for a window to display the source code,
it could see that I've set certain windows to "fixed", and skip those.
Hence I could manually choose which windows gdb should choose to display the
next thing it's going to display.
** TODO Monky kill hunk
There are many things in magit missing in monky, one of the more useful things
is the ability to kill a single hunk in the diff.

It might be as simple as calling "patch -R" ith the selected hunk, then
reverting the buffer to add this functionality.
** TODO repeat-last-command blacklist
I like the `repeat-last-command' keybindings, but there's just too many commands
in emacs, so the last command is generally a useless one, usually a motion
command bound to just as conventiant a keybinding.

There may be something with last-repeatable-command that I can do.
** TODO Org mode templates
Add org-capture template for work things
** DONE Use wrap-region when required
You can't really account for whatever other binding there is in the module
itself, so I just add an advice around it to ensure that `keyswap-mode' is
turned off when the fallback function is used.
** DONE Minibuffer eval and toggle-shifted-keys
Because the minibuffer eval hook is run every time the minibuffer is opened, but
the keymap is kept the same between instances, toggling the keybindings in the
minibuffer hook means each time the minibuffer is used the keybindings are
different.
I either need to change the keybindings directly in the minibuffer keymap, or
find a different hook that's only used on the initial startup.
** DONE `toggle-shifted-keys' alternate implementation
I could just add a minor-mode map onto every buffer.
In this map, I could have my lambda functions, but instead of checking whether
the current function is a wrapper by looking into the docstrings, I could just
see if a certain key has a binding in my minor-mode keymap.

If there is a binding, then I've overridden the key, otherwise I haven't.
If I want to toggle, I should remove the binding if there is one in the keymap,
if there isn't a binding in the keymap, I create one and put it in there.
* Things to learn:
IBuffer
Dired
[[info:org#Capture%20-%20Refile%20-%20Archive][Continue reading Org manual]]
[[info:calc][Read about the calc package.]]
Learn about the simple emacs spreadsheet
EDE (hopefully help with Makefiles)
Semantic (another CEDET tool)
Learn all about navigating info files.

* I want:
1) Evil surround - deleting surroundings removes everything inside and to
   + the left of the cursor with it.
2) Shortcut to switch to magit in current window.
   find if a magit buffer exists, then
   (switch-to-buffer " ... ")
   + temporarily set same-window-regexps?
3) Search google/youtube/github for thing under point

* Plugins:
** Plugins to check out:
+ hydra          :: Equivalent to submode in vim
** Code Folding.
+ folding      :: Must be automatic for code.
     Own version.
                  Should make my own version of code folding.
                  Have set of functions to fold/unfold in both
                  hs-minor-mode and outline-mode.
                  Want version to automatically make clone buffers to
                  allow for differently folded code in different
                  buffers.
                  Add the ability to fold on markers (for hiding
                     passwords in my password files)
     hs-minor-mode
                  Has hide and show
                  Doesn't have motion by folds
                  Commands built in to evil
                  Works nicely for more lancuaces than outline mode
     fold-dwim
                  "Unified interface to folding modes"
                  Same interface to outline, hs and folding
                  I already have a home-grown version that fits my
                    preferences more.
     global-semantic-folding-mode
                  apparently in cedet
     outline-minor-mode
                  Seems to do the same as hs-minor-mode
                  Adds in navigation commands
                  Have no idea why both these modes are in emacs.
                  Doesn't work well with C
